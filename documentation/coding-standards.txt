--== directory structure ==--

/build> compiled javascript
/config> app startup configuration
/coverage> test coverage reports
/node_modules> required dependencies
/src> typescript code
    /api> all api code
        /controllers> route controllers
        /dto> json-serializable objects that exist on both client/server
        /factories> entity factories
        /models> typeorm entities
        /repositories> custom typeorm repositories
        /services> bulk of game logic
    /config> api configuration
    /migration> typeorm migration objects
    /seed> typeorm seed objects
    /subscriber> typeorm subscriber objects
    /tests> all test
    /utils> utilitiy scripts
/types> custom type definitions

--== logic separation ==--

Services
- encapsulate the vast bulk of the game logic
- responsible for all error logging
- need to know nothing about the request
- if a decision is to be made about what data to collect based on the
  request, that logic should reside in the controller, not the service.

Controllers
- are strictly responsible for receiving and parsing requests, passing
  the data off to appropriate services, and parsing and returning data
  back in the response.
- should not deal directly with factories and repositories

Factories
- should be used for creating/building entities, as well as mock
  data for tests.
- NOTE: Currently, repositories need to be built from an instantiated
  factory.  This is not ideal, and should be refactored at some point.

Models
- should contain entity definitions only
- no logic of any kind

Repositories
- should contain all database logic for retrieval of records,
  associations, etc.
  
--= error handling =--

Controller methods should utilize try/catch blocks around service
calls.  Any caught errors should result in a 500 response. These caught
errors should not be logged, and details of the error should not be
included in the response.

Service methods should utilize try/catch blocks around factory,
repository, and other service calls. Any caught errors should be logged
with as much detail as possible and rethrown.

Factory and repository methods should use try/catch blocks as necessary.
Unlike services, caught errors should not be logged, but should be
rethrown so that the calling service can log them.