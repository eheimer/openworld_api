import path from 'path'
import fs from 'fs'

const outputPath = path.join(__dirname, '..', 'build/UnityModels')
fs.mkdir(outputPath, { recursive: true }, (err) => {
  if (err) throw err
})
const buildtime = new Date()
const buildstring = `${buildtime.toLocaleDateString()} ${buildtime.toLocaleTimeString()}`
const header = `// Autogenerated ${buildstring}`

const baseModel = `${header}
using System;

namespace Openworld.Models
{
	[Serializable]
	public class BaseModel
	{
    public string id;
    public string createdAt;
    public string updatedAt;

		public override string ToString(){
			return UnityEngine.JsonUtility.ToJson (this, true);
		}
	}
}`
fs.writeFile(path.join(outputPath, 'BaseModel.cs'), baseModel, (err) => {
  if (err) throw err
})

const modelpath = path.join(__dirname, '..', 'src/api/models')

const modelFiles = fs.readdirSync(modelpath).filter((file) => file.endsWith('.ts') && file.startsWith('B'))

/*
using System;

namespace Openworld.Models
{
	[Serializable]
	public class Battle: BaseModel
	{
        public string id;
        public int round;

        public string getName(){
            //convert createdAt to DateTime, then format to string
            DateTime createdAt = DateTime.Parse(this.createdAt);
            return createdAt.ToString("yyyy/MM/dd HH:mm:ss");
        }
    }
}
*/
for (const item in modelFiles) {
  console.log(modelFiles[item])
  const filename = path.join(modelpath, modelFiles[item])
  fs.readFile(filename, 'utf8', (err, data) => {
    if (data) {
      const lines = data.split(/\r?\n/)
      for (const line of lines) {
        if (line.trimStart().startsWith('@Column')) {
          console.log(line)
        }
      }
    }
    if (err) {
      console.log(err)
    }
  })
}
