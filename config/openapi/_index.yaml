openapi: 3.0.2
##  GENERAL RULES:
##  Besides defining the api spec for openapi, this file is also
##  used to auto-generate dto objects from the schemas.  As such:
##    1) Don't use 'oneOf'. instead, consider multiple endpoints
##    2) Don't include more than one schema if using 'allOf'
info:
  title: Openworld API
  description: Openworld API
  termsOfService: http://swagger.io.terms
  contact:
    email: eric@heimerman.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/v1

tags:
  - name: game
    description: Game APIs
  - name: player
    description: Player APIs
  - name: battle
    description: Battle APIs
  - name: creature
    description: Creature APIs
  - name: lists
    description: Game APIs
  - name: character
    description: Character APIs
  - name: item
    description: Item APIs
  - name: deprecated
    description: Only use for testing
  - name: testing
    description: Urls for testing api and sockets

paths:
  /client:
    $ref: './paths/static_client.yaml'
  /:
    $ref: './paths/static_socket.yaml'
  /players:
    $ref: './paths/players.yaml'
  /players/{playerId}:
    $ref: './paths/player.yaml'
  /players/{playerId}/detail:
    $ref: './paths/playerDetail.yaml'
  /players/{playerId}/games:
    $ref: './paths/playerGames.yaml'
  /games:
    $ref: './paths/games.yaml'
  /login:
    $ref: './paths/login.yaml'
  /games/{gameId}:
    $ref: './paths/game.yaml'
  /games/{gameId}/players/{playerId}:
    $ref: './paths/gamePlayer.yaml'
  /games/{gameId}/players:
    $ref: './paths/gamePlayers.yaml'
  /games/{gameId}/characters:
    $ref: './paths/characters.yaml'
  /characters/{characterId}:
    $ref: './paths/character.yaml'
  /characters/{characterId}/detail:
    $ref: './paths/characterDetail.yaml'
  /games/{gameId}/battles:
    $ref: './paths/battles.yaml'
  /games/{gameId}/battles/{battleId}:
    $ref: './paths/battle.yaml'
  /games/{gameId}/battles/{battleId}/enemies:
    $ref: './paths/battleEnemies.yaml'
  /skills:
    description: GET list of all skills
    $ref: './paths/skills.yaml'
  /characters/{characterId}/skills/{skillId}:
    description: add/remove skills from character, update skill level
    $ref: './paths/characterSkill.yaml'

  # /games/{gameId}/battles/{battleId}/friendlies:
  #   post:
  #     summary: add friendly to battle
  #     description: creates a new creatureInstance from the specified monsterId and adds it to the battle as a friendly
  #     tags:
  #       - battle
  #     operationId: createFriendly
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/MonsterRequest'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/battles/{battleId}/pets/{creatureId}:
  #   parameters:
  #   - name: gameId
  #     required: true
  #     in: path
  #     description: the gameId of the battle to modify
  #     schema:
  #       type: number
  #   - name: battleId
  #     required: true
  #     in: path
  #     description: the battle to modify
  #     schema:
  #       type: number
  #   - name: creatureId
  #     required: true
  #     in: path
  #     description: the creatureInstanceId to add
  #     schema:
  #       type: number
  #   post:
  #     summary: add pet to battle
  #     description: adds a player's pet to the battle as a friendly
  #     tags:
  #       - battle
  #     operationId: addPet
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  #   delete:
  #     summary: remove pet from battle
  #     description: removes the player's pet from the battle
  #     tags:
  #       - battle
  #     operationId: removePet
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/battles/{battleId}/nextRound:
  #   post:
  #     summary: advance battle to next round
  #     description: advances battle to the next round, generates new actions for creatures, etc
  #     tags:
  #       - battle
  #     operationId: nextRound
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/battles/{battleId}/dealDamage:
  #   post:
  #     summary: deal damage
  #     description:  calculates damage dealt to specified creatures/characters
  #     tags:
  #       - battle
  #     operationId: dealDamage
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BattleDamageRequest'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/battles/{battleId}/join:
  #   post:
  #     summary: join a battle
  #     description: adds the player's character for the game to the battle
  #     tags:
  #       - battle
  #     operationId: joinBattle
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/conditions:
  #   post:
  #     summary: add condition to creature
  #     description: creates a new activeCondition and applies it to the creature
  #     tags:
  #       - creature
  #     operationId: creatureAddCondition
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       201:
  #         $ref: '#/components/responses/Location'
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/conditions/{conditionId}:
  #   delete:
  #     summary: remove activeCondition from creature
  #     tags:
  #       - creature
  #     operationId: creatureRemoveCondition
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     - name: conditionId
  #       required: true
  #       in: path
  #       description: the condition to remove
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/tame:
  #   post:
  #     summary: tame creature
  #     description: marks the creature as tamed, adds it to the player as a pet, moves it from the battle's enemies to friendlies
  #     tags:
  #       - creature
  #     operationId: tameCreature
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/release:
  #   post:
  #     summary: release tamed creature
  #     description: marks the creature as untamed, removes it from the player's pets, moves it from the battle's friendlies to enemies
  #     tags:
  #       - creature
  #     operationId: releasePet
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle of the creature to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/resurrect:
  #   post:
  #     summary: resurrect player's pet
  #     tags:
  #       - creature
  #     operationId: resurrectPet
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}:
  #   parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to delete
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to delete
  #       schema:
  #         type: number
  #   patch:
  #     summary: update pet partial
  #     description: used to rename pets
  #     tags:
  #       - creature
  #     operationId: updatePet
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/RenamePetRequest'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  #   delete:
  #     summary: delete creature
  #     description: deletes creature, its inventory and conditions
  #     tags:
  #       - creature
  #     operationId: destroyCreature
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/monsters:
  #   get:
  #     summary: get monsters
  #     tags:
  #       - lists
  #     operationId: getMonsters
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to delete
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       200:
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: number
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/damageTypes:
  #   get:
  #     summary: get damage types
  #     tags:
  #       - lists
  #     operationId: getDamageTypes
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to delete
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       200:
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: number
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/conditions:
  #   get:
  #     summary: get conditions
  #     tags:
  #       - lists
  #     operationId: getConditions
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to delete
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       200:
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: number
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/characters/{characterId}/resurrect:
  #   post:
  #     summary: resurrect character
  #     tags:
  #       - character
  #     operationId: resurrectCharacter
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId
  #       schema:
  #         type: number
  #     - name: characterId
  #       required: true
  #       in: path
  #       description: the characterId
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/FailResponse'
  #       500:
  #         $ref: '#/components/responses/FailResponse'
  # /games/{gameId}/items/{itemType}/{itemId}/take:
  #   post:
  #     summary: take item
  #     description: removes item from source inventory, and adds it to player/character inventory
  #     tags:
  #       - item
  #     operationId: takeItem
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId
  #       schema:
  #         type: number
  #     - name: itemType
  #       required: true
  #       in: path
  #       description: item type
  #       schema:
  #         $ref: '#/components/schemas/ItemType'
  #     - name: itemId
  #       required: true
  #       in: path
  #       description: itemId
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/FailResponse'
  #       500:
  #         $ref: '#/components/responses/FailResponse'
  # /games/{gameId}/items/{itemType}/{itemId}/equip:
  #   post:
  #     summary: equip item
  #     tags:
  #       - item
  #     operationId: equipItem
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId
  #       schema:
  #         type: number
  #     - name: itemType
  #       required: true
  #       in: path
  #       description: item type
  #       schema:
  #         $ref: '#/components/schemas/EquipableType'
  #     - name: itemId
  #       required: true
  #       in: path
  #       description: itemId
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/FailResponse'
  #       500:
  #         $ref: '#/components/responses/FailResponse'
  # /games/{gameId}/items/{itemType}/{itemId}/damage:
  #   post:
  #     summary: damage item
  #     description: marks item as damaged, or if the item was already damage, destroys it
  #     tags:
  #       - item
  #     operationId: damageItem
  #     parameters:
  #       - name: gameId
  #         required: true
  #         in: path
  #         description: the gameId
  #         schema:
  #           type: number
  #       - name: itemType
  #         required: true
  #         in: path
  #         description: item type
  #         schema:
  #           $ref: '#/components/schemas/DamageableType'
  #       - name: itemId
  #         required: true
  #         in: path
  #         description: itemId
  #         schema:
  #           type: number
  #     # requestBody:
  #     # required: false
  #     # content:
  #     # application/json:
  #     # schema:
  #     # $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       200:
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ItemDamageResponse'
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/items/{itemType}/{itemId}/repair:
  #   post:
  #     summary: repair item
  #     tags:
  #       - item
  #     operationId: repairItem
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId
  #       schema:
  #         type: number
  #     - name: itemType
  #       required: true
  #       in: path
  #       description: item type
  #       schema:
  #         $ref: '#/components/schemas/DamageableType'
  #     - name: itemId
  #       required: true
  #       in: path
  #       description: itemId
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/FailResponse'
  #       500:
  #         $ref: '#/components/responses/FailResponse'
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    $ref: './requests/_index.yaml'
  responses:
    $ref: './responses/_index.yaml'
  schemas:
    $ref: './schemas/_index.yaml'
