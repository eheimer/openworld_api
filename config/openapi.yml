openapi: 3.0.2
##  GENERAL RULES:
##  Besides defining the api spec for openapi, this file is also
##  used to auto-generate dto objects from the schemas.  As such:
##    1) Don't use 'oneOf'. instead, consider multiple endpoints
##    2) Don't include more than one schema if using 'allOf'
info:
  title: Openworld API
  description: Openworld API
  termsOfService: http://swagger.io.terms
  contact:
    email: eric@heimerman.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/v1

tags:
  - name: game
    description: Game APIs
  - name: player
    description: Player APIs
  - name: battle
    description: Battle APIs
  - name: creature
    description: Creature APIs
  - name: lists
    description: Game APIs
  - name: character
    description: Character APIs
  - name: item
    description: Item APIs
  - name: deprecated
    description: Only use for testing
  - name: testing
    description: Urls for testing api and sockets

paths:
  /client:
    get:
      summary: Download client files
      description: Static files
      servers:
        - url: /
      security: []
      tags:
        - static
      operationId: clientFiles
      responses:
        200:
          $ref: '#/components/responses/PlainText'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /:
    get:
      summary: Socket testing
      description: Socket entrypoint for testing sockets in a browser
      servers:
        - url: /
      security: []
      tags:
        - testing
      operationId: socketTest
      responses:
        200:
          $ref: '#/components/responses/PlainText'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /players:
    post:
      security: []
      summary: register new player
      operationId: register
      tags:
        - player
      requestBody:
        $ref: '#/components/requestBodies/Register'
      responses:
        201:
          $ref: '#/components/responses/Location'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /players/{playerId}:
    get:
      summary: retrieve a player
      description: returns public info for player
      tags:
        - player
      operationId: getPlayer
      parameters:
        - name: playerId
          required: true
          in: path
          description: The player id to retrieve
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Player'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /players/{playerId}/detail:
    get:
      summary: retrieve player details
      description: returns more details if the requester is the player being requested
      tags:
        - player
      operationId: getPlayerDetail
      parameters:
        - name: playerId
          required: true
          in: path
          description: The player id to retrieve
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/PlayerDetail'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /players/{playerId}/games:
    get:
      summary: get player's /games
      description: returns the games a player has access to
      tags:
        - game
        - player
      operationId: getGames
      parameters:
        - name: playerId
          required: true
          in: path
          description: The player id
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Games'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /games:
    post:
      summary: create a new game
      tags:
        - game
      operationId: createGame
      requestBody:
        $ref: '#/components/requestBodies/CreateGame'
      responses:
        201:
          $ref: '#/components/responses/Location'
        500:
          $ref: '#/components/responses/Fail'
  /login:
    post:
      security: []
      summary: login
      description: login the player to the specified game, initiate a socket if successful
      tags:
        - player
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/Login'

      responses:
        200:
          $ref: '#/components/responses/Login'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /games/{gameId}:
    parameters:
      - name: gameId
        required: true
        in: path
        description: The gameId to delete
        schema:
          type: string
    get:
      summary: retrieve game
      operationId: getGame
      tags:
        - game
      responses:
        200:
          $ref: '#/components/responses/Game'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
    patch:
      summary: update game partial
      operationId: updateGame
      tags:
        - game
      requestBody:
        $ref: '#/components/requestBodies/UpdateGame'
      responses:
        204:
          $ref: '#/components/responses/DeleteOrUpate'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
    delete:
      summary: remove a game
      description: deletes the game, all battles, characters, creatureInstances, inventories, etc
      tags:
        - game
      operationId: deleteGame
      responses:
        204:
          $ref: '#/components/responses/DeleteOrUpate'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /games/{gameId}/players/{playerId}:
    parameters:
      - name: gameId
        required: true
        in: path
        description: the gameId
        schema:
          type: string
      - name: playerId
        required: true
        in: path
        description: the playerId
        schema:
          type: string
    post:
      summary: add a player to a game
      description: player id must exist at /players/{playerId}
      tags:
        - game
        - player
      operationId: joinGame
      responses:
        204:
          $ref: '#/components/responses/DeleteOrUpate'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
    delete:
      summary: remove a player from a game
      description: player id must exist at /players/{playerId}
      tags:
        - game
        - player
      operationId: leaveGame
      responses:
        204:
          $ref: '#/components/responses/DeleteOrUpate'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /games/{gameId}/players:
    parameters:
      - name: gameId
        required: true
        in: path
        description: the gameId to invite a player to
        schema:
          type: string
    post:
      summary: invite a player to a game
      tags:
        - game
      operationId: invitePlayer
      requestBody:
        $ref: '#/components/requestBodies/InvitePlayer'
      responses:
        201:
          $ref: '#/components/responses/Location'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /games/{gameId}/battles:
    parameters:
      - name: gameId
        required: true
        in: path
        description: the gameId to add the battle to
        schema:
          type: string
    post:
      summary: create a new battle
      description: creates a new battle, adding the player's character associated with /games/{gameId} to the battle
      tags:
        - battle
      operationId: createBattle
      responses:
        201:
          $ref: '#/components/responses/Location'
        500:
          $ref: '#/components/responses/Fail'
    get:
      summary: get battles
      tags:
        - game
      operationId: getGameBattles
      responses:
        200:
          $ref: '#/components/responses/IdCollection'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /games/{gameId}/battles/{battleId}:
    parameters:
      - name: gameId
        required: true
        in: path
        description: the gameId of the battle to retrieve
        schema:
          type: number
      - name: battleId
        required: true
        in: path
        description: the battle to retrieve
        schema:
          type: number
    get:
      summary: retrieve a battle
      tags:
        - battle
      operationId: getBattle
      responses:
        200:
          $ref: '#/components/responses/Battle'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
    delete:
      summary: delete a battle
      tags:
        - battle
      operationId: deleteBattle
      responses:
        204:
          $ref: '#/components/responses/DeleteOrUpate'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /games/{gameId}/battles/{battleId}/enemies:
    post:
      summary: add enemy to battle
      description: creates a new creatureInstance from the specified monsterId and adds it to the battle as an enemy
      tags:
        - battle
      operationId: createEnemy
      parameters:
        - name: gameId
          required: true
          in: path
          description: the gameId of the battle to modify
          schema:
            type: number
        - name: battleId
          required: true
          in: path
          description: the battle to modify
          schema:
            type: number
      requestBody:
        $ref: '#/components/requestBodies/Monster'
      responses:
        204:
          $ref: '#/components/responses/DeleteOrUpate'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  # /games/{gameId}/battles/{battleId}/friendlies:
  #   post:
  #     summary: add friendly to battle
  #     description: creates a new creatureInstance from the specified monsterId and adds it to the battle as a friendly
  #     tags:
  #       - battle
  #     operationId: createFriendly
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/MonsterRequest'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/battles/{battleId}/pets/{creatureId}:
  #   parameters:
  #   - name: gameId
  #     required: true
  #     in: path
  #     description: the gameId of the battle to modify
  #     schema:
  #       type: number
  #   - name: battleId
  #     required: true
  #     in: path
  #     description: the battle to modify
  #     schema:
  #       type: number
  #   - name: creatureId
  #     required: true
  #     in: path
  #     description: the creatureInstanceId to add
  #     schema:
  #       type: number
  #   post:
  #     summary: add pet to battle
  #     description: adds a player's pet to the battle as a friendly
  #     tags:
  #       - battle
  #     operationId: addPet
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  #   delete:
  #     summary: remove pet from battle
  #     description: removes the player's pet from the battle
  #     tags:
  #       - battle
  #     operationId: removePet
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/battles/{battleId}/nextRound:
  #   post:
  #     summary: advance battle to next round
  #     description: advances battle to the next round, generates new actions for creatures, etc
  #     tags:
  #       - battle
  #     operationId: nextRound
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/battles/{battleId}/dealDamage:
  #   post:
  #     summary: deal damage
  #     description:  calculates damage dealt to specified creatures/characters
  #     tags:
  #       - battle
  #     operationId: dealDamage
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BattleDamageRequest'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/battles/{battleId}/join:
  #   post:
  #     summary: join a battle
  #     description: adds the player's character for the game to the battle
  #     tags:
  #       - battle
  #     operationId: joinBattle
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/conditions:
  #   post:
  #     summary: add condition to creature
  #     description: creates a new activeCondition and applies it to the creature
  #     tags:
  #       - creature
  #     operationId: creatureAddCondition
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       201:
  #         $ref: '#/components/responses/Location'
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/conditions/{conditionId}:
  #   delete:
  #     summary: remove activeCondition from creature
  #     tags:
  #       - creature
  #     operationId: creatureRemoveCondition
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     - name: conditionId
  #       required: true
  #       in: path
  #       description: the condition to remove
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/tame:
  #   post:
  #     summary: tame creature
  #     description: marks the creature as tamed, adds it to the player as a pet, moves it from the battle's enemies to friendlies
  #     tags:
  #       - creature
  #     operationId: tameCreature
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/release:
  #   post:
  #     summary: release tamed creature
  #     description: marks the creature as untamed, removes it from the player's pets, moves it from the battle's friendlies to enemies
  #     tags:
  #       - creature
  #     operationId: releasePet
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the battle of the creature to modify
  #       schema:
  #         type: number
  #     - name: battleId
  #       required: true
  #       in: path
  #       description: the battle of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}/resurrect:
  #   post:
  #     summary: resurrect player's pet
  #     tags:
  #       - creature
  #     operationId: resurrectPet
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to modify
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to modify
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/creatures/{creatureId}:
  #   parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to delete
  #       schema:
  #         type: number
  #     - name: creatureId
  #       required: true
  #       in: path
  #       description: the creature to delete
  #       schema:
  #         type: number
  #   patch:
  #     summary: update pet partial
  #     description: used to rename pets
  #     tags:
  #       - creature
  #     operationId: updatePet
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/RenamePetRequest'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  #   delete:
  #     summary: delete creature
  #     description: deletes creature, its inventory and conditions
  #     tags:
  #       - creature
  #     operationId: destroyCreature
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/monsters:
  #   get:
  #     summary: get monsters
  #     tags:
  #       - lists
  #     operationId: getMonsters
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to delete
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       200:
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: number
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/damageTypes:
  #   get:
  #     summary: get damage types
  #     tags:
  #       - lists
  #     operationId: getDamageTypes
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to delete
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       200:
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: number
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/conditions:
  #   get:
  #     summary: get conditions
  #     tags:
  #       - lists
  #     operationId: getConditions
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId of the creature to delete
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       200:
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: number
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  /games/{gameId}/characters:
    post:
      summary: create character
      tags:
        - character
        - game
      operationId: createCharacter
      requestBody:
        $ref: '#/components/requestBodies/CreateCharacter'
      responses:
        201:
          $ref: '#/components/responses/Location'
        500:
          $ref: '#/components/responses/Fail'
    get:
      summary: get all characters for game
      tags:
        - character
        - game
      operationId: getGameCharacters
      responses:
        200:
          $ref: '#/components/responses/IdCollection'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /characters/{characterId}:
    parameters:
      - name: characterId
        required: true
        in: path
        description: the characterId
        schema:
          type: string
    get:
      summary: retrieve character
      description: retrieves either the public character or detail, depending on the player making the request
      tags:
        - character
      operationId: getCharacter
      responses:
        200:
          $ref: '#/components/responses/Character'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
    patch:
      summary: update character partial
      tags:
        - character
      operationId: updateCharacter
      requestBody:
        $ref: '#/components/requestBodies/UpdateCharacter'
      responses:
        204:
          $ref: '#/components/responses/DeleteOrUpate'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
    delete:
      summary: remove a character
      description: deletes the character and its inventory
      tags:
        - character
      operationId: deleteCharacter
      responses:
        204:
          $ref: '#/components/responses/DeleteOrUpate'
        404:
          $ref: '#/components/responses/Fail'
        500:
          $ref: '#/components/responses/Fail'
  /characters/{characterId}/detail:
    parameters:
      - name: characterId
        required: true
        in: path
        description: the characterId
        schema:
          type: string
    get:
      summary: retrieve character
      description: retrieves either the public character or detail, depending on the player making the request
      tags:
        - character
      operationId: getCharacterDetail
      responses:
        200:
          $ref: '#/components/responses/CharacterDetail'
  # /games/{gameId}/characters/{characterId}/resurrect:
  #   post:
  #     summary: resurrect character
  #     tags:
  #       - character
  #     operationId: resurrectCharacter
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId
  #       schema:
  #         type: number
  #     - name: characterId
  #       required: true
  #       in: path
  #       description: the characterId
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/FailResponse'
  #       500:
  #         $ref: '#/components/responses/FailResponse'
  # /games/{gameId}/items/{itemType}/{itemId}/take:
  #   post:
  #     summary: take item
  #     description: removes item from source inventory, and adds it to player/character inventory
  #     tags:
  #       - item
  #     operationId: takeItem
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId
  #       schema:
  #         type: number
  #     - name: itemType
  #       required: true
  #       in: path
  #       description: item type
  #       schema:
  #         $ref: '#/components/schemas/ItemType'
  #     - name: itemId
  #       required: true
  #       in: path
  #       description: itemId
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/FailResponse'
  #       500:
  #         $ref: '#/components/responses/FailResponse'
  # /games/{gameId}/items/{itemType}/{itemId}/equip:
  #   post:
  #     summary: equip item
  #     tags:
  #       - item
  #     operationId: equipItem
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId
  #       schema:
  #         type: number
  #     - name: itemType
  #       required: true
  #       in: path
  #       description: item type
  #       schema:
  #         $ref: '#/components/schemas/EquipableType'
  #     - name: itemId
  #       required: true
  #       in: path
  #       description: itemId
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/FailResponse'
  #       500:
  #         $ref: '#/components/responses/FailResponse'
  # /games/{gameId}/items/{itemType}/{itemId}/damage:
  #   post:
  #     summary: damage item
  #     description: marks item as damaged, or if the item was already damage, destroys it
  #     tags:
  #       - item
  #     operationId: damageItem
  #     parameters:
  #       - name: gameId
  #         required: true
  #         in: path
  #         description: the gameId
  #         schema:
  #           type: number
  #       - name: itemType
  #         required: true
  #         in: path
  #         description: item type
  #         schema:
  #           $ref: '#/components/schemas/DamageableType'
  #       - name: itemId
  #         required: true
  #         in: path
  #         description: itemId
  #         schema:
  #           type: number
  #     # requestBody:
  #     # required: false
  #     # content:
  #     # application/json:
  #     # schema:
  #     # $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       200:
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ItemDamageResponse'
  #       404:
  #         $ref: '#/components/responses/Fail'
  #       500:
  #         $ref: '#/components/responses/Fail'
  # /games/{gameId}/items/{itemType}/{itemId}/repair:
  #   post:
  #     summary: repair item
  #     tags:
  #       - item
  #     operationId: repairItem
  #     parameters:
  #     - name: gameId
  #       required: true
  #       in: path
  #       description: the gameId
  #       schema:
  #         type: number
  #     - name: itemType
  #       required: true
  #       in: path
  #       description: item type
  #       schema:
  #         $ref: '#/components/schemas/DamageableType'
  #     - name: itemId
  #       required: true
  #       in: path
  #       description: itemId
  #       schema:
  #         type: number
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/BasicTokenObject'
  #     responses:
  #       204:
  #         description: Success
  #       404:
  #         $ref: '#/components/responses/FailResponse'
  #       500:
  #         $ref: '#/components/responses/FailResponse'
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    Login:
      description: login request
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
    Register:
      description: register new player request
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - email
              - password
              - name
            properties:
              email:
                type: string
                format: email
              password:
                type: string
              name:
                type: string
    CreateGame:
      description: Create game request
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - name
              - maxPlayers
            properties:
              name:
                type: string
              maxPlayers:
                type: number
    UpdateGame:
      description: Update game request
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
              maxPlayers:
                type: number
    CreateCharacter:
      description: Create or Update character request
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - name
              - maxHp
              - baseResist
              - inventorySize
            properties:
              name:
                type: string
              maxHp:
                type: number
              baseResist:
                type: number
              inventorySize:
                type: number
    UpdateCharacter:
      description: Create or Update character request
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
              maxHp:
                type: number
              baseResist:
                type: number
              inventorySize:
                type: number
    InvitePlayer:
      description: Invite a player to a game
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - email
            properties:
              email:
                type: string
                format: email
    BattleDamage:
      description: Deal damage request
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - damageType
              - damageAmt
            properties:
              creatures:
                type: array
                items:
                  type: number
              characters:
                type: array
                items:
                  type: number
              damageType:
                type: number
              damageAmt:
                type: number
    Monster:
      description: Monster request
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              monsterId:
                type: number
    RenamePet:
      description: Rename pet
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
  responses:
    DeleteOrUpate:
      description: Empty success response from delete or update
    Location:
      description: '201: A response that returns a location header'
      headers:
        Location:
          description: the uri to retrieve the player
          schema:
            type: string
    PlainText:
      description: response in plain text/html
      content:
        text/html:
          schema:
            type: string
    Fail:
      description: Request failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FailResponse'
    IdCollection:
      description: a response which consists of an array of general object ids
      content:
        application/json:
          schema:
            type: array
            items:
              type: number
    Login:
      description: login success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponse'
    Player:
      description: Get player info success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlayerResponse'
    PlayerDetail:
      description: Get player detail success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlayerDetailResponse'
    Games:
      description: Get players games success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GamesResponse'
    Game:
      description: game detail request success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Game'
    Character:
      description: Get character success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CharacterResponse'
    CharacterDetail:
      description: Get character success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CharacterDetailResponse'
    Battle:
      description: Battle object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BattleResponse'
  schemas:
    Error:
      description: an error
      type: object
      additionalProperties: false
      required:
        - type
        - message
      properties:
        type:
          type: string
        message:
          type: string
    FailResponse:
      description: request failure
      type: object
      additionalProperties: false
      required:
        - success
        - error
      properties:
        success:
          type: boolean
        error:
          $ref: '#/components/schemas/Error'
    LoginResponse:
      description: login response
      type: object
      additionalProperties: false
      required:
        - token
        - player
      properties:
        token:
          type: string
        player:
          type: string
    PlayerResponse:
      description: a player
      allOf:
        - $ref: '#/components/schemas/PublicPlayer'
    PlayerDetailResponse:
      description: player details
      allOf:
        - $ref: '#/components/schemas/PlayerDetail'
    GamesResponse:
      description: collection of games
      type: array
      allOf:
        - $ref: '#/components/schemas/GameCharacter'
    BattleResponse:
      description: the battle
      type: object
    CharacterResponse:
      description: character response
      allOf:
        - $ref: '#/components/schemas/PublicCharacter'
    CharacterDetailResponse:
      description: character response
      allOf:
        - $ref: '#/components/schemas/CharacterDetail'
    PublicPlayer:
      description: Player object
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        lastSeenAt:
          type: string
          format: date-time
    PlayerDetail:
      description: Player details
      type: object
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/PublicPlayer'
      properties:
        id:
          type: string
        email:
          type: string
          format: email
    PublicCharacter:
      description: Character object
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        id:
          type: string
    CharacterDetail:
      description: Character details
      type: object
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/PublicCharacter'
      properties:
        maxHp:
          type: number
        baseResist:
          type: number
        inventorySize:
          type: number
    Game:
      description: Create game object
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        maxPlayers:
          type: number
        id:
          type: string
    GameCharacter:
      description: Game and Character
      type: object
      additionalProperties: false
      properties:
        game:
          $ref: '#/components/schemas/Game'
        character:
          $ref: '#/components/schemas/PublicCharacter'
        owner:
          type: boolean
    ItemType:
      description: Item type
      type: string
      enum: [weapon, armor, jewelry, spellbook]
    EquipableType:
      description: Item type
      type: string
      enum: [weapon, armor, jewelry]
    DamageableType:
      description: Item type
      type: string
      enum: [weapon, armor]
    ItemDamageType:
      description: Item damage type
      type: string
      enum: [damaged, destroyed]
    ItemDamageResponse:
      description: Item damaged
      type: object
      additionalProperties: false
      required:
        - result
      properties:
        result:
          $ref: '#/components/schemas/ItemDamageType'
